---
title: Backend Services
category: platform
last_reviewed_on: 2021-06-01
review_in: 3 months
---

<% if current_page.url != "/" %># <%= current_page.data.title %><% end %>

![alt text](runner-in-the-platform.png "Diagram of the platform focussing on a running form.")

## User Datastore
Services deployed using MOJ Forms/ Formbuilder require a component to store data submitted by their users in a secure way.
There is an suitable implementation agreed with the Information Security team, discussed in detail in an internal document
[Runner / User data store Threats & Mitigations](https://docs.google.com/document/d/1L9jbYwZPk2WWhpZXKTok0_JHsBzIXlR6flWuEMvwghg/edit?usp=sharing).

###Technology
- PostgrSQL RDS
- API workers, Ruby on Rails

###Repositories
- [fb-user-datastore](https://github.com/ministryofjustice/fb-user-datastore)
- *internal link: [fb-user-datastore-deploy](https://github.com/ministryofjustice/fb-user-datastore-deploy)*


### JWT authentication

Each request will be timestamped and signed using a per-service serviceToken (generated by Publisher and injected into the serviceâ€™s Runner as an environment variable).

## Publisher [Legacy]
Deploying a form
Deploying a form fetches the form schema from GitHub and creates runner instances and ingresses inside the Cloud platform.
There is a short delay between deploying a form and seeing it published online.
There is also a short delay between deploying changes to a form and seeing them online.

Publisher needs:

- A field adding to the Service record to store the service token
- Auto-generation of the service token on creation
- A button in the UI for generating a new service token
- UI to allow inspection of the service token (treated like a password field - i.e. obfuscated by default, only revealed when explicitly needed)
- SERVICE_TOKEN to be injected as an environment variable when deploying a service

###Technology
- Ruby on Rails

###Repositories
- [fb-publisher](https://github.com/ministryofjustice/fb-publisher)
- *internal link: [fb-publisher-deploy](https://github.com/ministryofjustice/fb-publisher-deploy)*

## User FileStore

The User Filestore is a service for storing files uploaded by users for the lifetime of their application.

It is comprised of an API service and a storage service (Amazon S3).

The service:

- is transient

  Files are stored for the same length of time as the user's other data held in the User Datastore

  28 days by default

- is not for making files available either publicly or to final intended recipients

  Files can only be retrieved from storage through the API

- is secure

  Files are stored encrypted so that files cannot be accessed if the collection is backed up/moved elsewhere

- controls access

  Files are stored using a key generated from a digest of the service, user id and file's fingerprint encrypted with the user's id/token digest

  Files can only be retrieved when presented with all those pieces.


####  Signing requests

Requests should be signed with JWT, see section below.

#### Checking additional requirements

Requests should be checked for the presence of `encrypted_user_id_and_token` (as property for POST, x-header for GET)

- Error if `encrypted_user_id_and_token` property is not present
  - code: `403`
  - name: `forbidden.user-id-token-missing`

#### Creating S3 key

- Create digest from service token + user id + file fingerprint
- Encrypt digest via AES-256 with the encrypted_user_id_and_token as key
- Generate hash of encrypted digest
- Key is /{service_slug}/{user_id}/{hashed_digest}

#### Store file

`POST /service/{service_slug}/{user_id}`

```json
{
  "iat": "<integer> unix_timestamp",
  "encrypted_user_id_and_token": "<encryped_string> userId+userToken encrypted via AES-256 with the serviceToken as the key",
  "file": "<binary>",
  "policy": {
    "allowed_types": [
      "<string> mediatype"
    ],
    "max_size": "<integer> bytes",
    "expires": "<integer> days"
  }
}
```

**A. As per "Check request correctly signed and meets requirements"**

**B. Check file**

- Perform size check if `policy.max_size` is present
  - Error if file is too large
    - code: `400`
    - name: `invalid.too-large`
    - max_size: {max_size}
    - size: {file_size}
- Perform file type checks if `policy.allowed_types` is present
  - Error if file is wrong type
    - code: `400`
    - name: `invalid.type`
    - type: {file_type}
- Send to virus scanning service
  - Error if file contains virus
    - code: `400`
    - name: `invalid.virus`
    - virus_name: {virus_name}

**C. Store file**

- Fingerprint file
- Create S3 key
- Encrypt file using `encrypted_user_id_and_token` as key
- Upload file to S3 key
  - Error if file cannot be stored
    - code: `503`
    - name: `unavailable.file-store-failed`
    - [service_code]
    - [message] 'any additional info from S3 request'

**D. Return file storage details**

```json
{
  "url": "/service/{service_slug}/{user_id}/{fingerprint}",
  "size": "<integer>(bytes)",
  "type": "<string>(mediatype)",
  "date": "<integer>(unix_timestamp)"
}
```

- Status code if no file previously existed
  - `201` (Created)

- Status code if a file previously existed
  - `204` (No Content)

This information is stored in the User Datastore and is sent to the Submitter to retrieve the file.

#### Retrieve file

`GET /service/{service_slug}/{user_id}/{fingerprint}`

`encrypted_user_id_and_token` must be sent as an x-header.

**A. As per "Check request correctly signed and meets requirements"**

**B. Fetch file**

- Create S3 key
- Fetch file
  - Error if file cannot be fetched
    - code: `503`
    - name: `unavailable.file-retrieval-failed`
    - [service_code]
    - [message] 'any additional info from S3 request'
  - Error if file does not exist
    - code: `404`
    - name: `not-found`
- Decrypt file using `encrypted_user_id_and_token` as key

**C. Return file**

Return file as body of repsonse

###Technology
- Ruby on Rails

###Repositories
- [fb-user-filestore](https://github.com/ministryofjustice/fb-user-filestore)
- *internal link: [fb-user-filestore-deploy](https://github.com/ministryofjustice/fb-user-filestore-deploy)*

## Service Token Cache


## Antivirus
Proves uploaded document scanning.

###Technology
- ClamAv

###Repositories
- [fb-av](https://github.com/ministryofjustice/fb-av)
- *internal link: [fb-av-deploy](https://github.com/ministryofjustice/fb-av-deploy)*

