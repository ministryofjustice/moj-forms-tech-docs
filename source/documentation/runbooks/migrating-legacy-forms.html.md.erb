---
title: Migrating Legacy Forms
category: runbooks
last_reviewed_on: 2023-01-13
review_in: 6 months
---

<% if current_page.url != "/" %># <%= current_page.data.title %><% end %>

## Context
We maintain some forms that have live users but were created using the legacy editor. The team is going through the process of manually migrating the content of these forms, this runbook describes the technical steps for recreating the new and deleting the old.

This document will refer to _publisher_ and _editor_, where publisher is the legacy form builder and editor is the current system. This is reflected in the domain names of the respective systems.
This document will use _service_ and _form_ to refer to a form, this is because in technical systems the language _service_ is often used, though _form_ is used when communicating to users.

## Steps

1. Confirm there is an entry for the legacy form in the list of legacy forms maintained in the editor, visit the *admin console* and select *legacy form names*. This list is maintained by hand and prevents creation of clashing form names.

2. Create a new form in the editor in the required environment with a name like \<legacy form name\>-migration

3. There will be a manual recreation of the form at this point to match the legacy form using the editor. This is not part of the runbook and usually completed over time by a content specialist or the form owner.
There is no programmatic way to migrate the JSON metadata from the old format to the new, the schemas differ vastly and the legacy forms are few enough in number and simple enough in complexity that developing an automated migration for the schema will take longer than a manual migration.

4. When the new form is ready to be published (there will likely be a publish to test for QA, then a migration on live and further QA, so a repeat of this runbook in the live-test and live-production editors) you can delete the legacy form name from *legacy service names* in the admin console

5. To rename the form, navigate to the admin console and navigate to the form. Update the metadata through the console UI, searching for *service_name* and replacing it with the name of the legacy service.

6. Publish the form - kubernetes will replace the old pod with a new pod of the same name containing the new form. You can confirm this by running `kubectl describe <service-name>` in the namespace you published to. The pod will list the docker image it is using, if the image name contains `fb-runner-node` it is the legacy form, or `fb-runner` for a successful deployment of the editor form.

7. Visit the pingdom/solarwinds console. Remove the uptime check that corresponds to service name (which was created for the old service) and then add a new uptime check for the service via the editor admin console. The old check would still work as the url should be the same, but creating a new one via the admin console also creates a database entry that we use to keep inventory of our monitoring services.

## Rollback

You can return to the legacy publisher and publish the legacy form, this will deploy the old form over the new in a new pod in the same way.

## Cleanup

The legacy publisher has an option in the UI to delete the legacy form. This is irreversible. No further cleanup is necessary.
